[pytest]
# Configurazione pytest per il progetto RAG Gestionale

# Pattern per scoperta test
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Directory test
testpaths = tests

# Opzioni asyncio
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Markers personalizzati
markers =
    unit: Unit tests per singoli moduli
    integration: Integration tests per API e servizi
    e2e: End-to-end tests per flussi completi
    slow: Test lenti che richiedono molto tempo
    requires_llm: Test che richiedono accesso LLM
    requires_qdrant: Test che richiedono Qdrant running
    requires_opensearch: Test che richiedono OpenSearch running

# Opzioni di output
addopts =
    -v
    --strict-markers
    --tb=short
    --cov=src/rag_gestionale
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-branch
    --cov-fail-under=80

# Log capture
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filtra warning
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:transformers.*
    ignore::FutureWarning:sentence_transformers.*
